version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: quant-mysql-prod
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: quant_trading
      TZ: Asia/Shanghai
    volumes:
      - ./data/mysql:/var/lib/mysql
      - ./infrastructure/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3306:3306"
    networks:
      - quant-network
    command: --default-authentication-plugin=mysql_native_password
              --character-set-server=utf8mb4
              --collation-server=utf8mb4_unicode_ci
              --max_connections=1000
              --innodb_buffer_pool_size=1G
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: quant-redis-prod
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    environment:
      TZ: Asia/Shanghai
    volumes:
      - ./data/redis:/data
    ports:
      - "6379:6379"
    networks:
      - quant-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Zookeeper
  zookeeper:
    image: zookeeper:3.9
    container_name: quant-zookeeper-prod
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      TZ: Asia/Shanghai
    volumes:
      - ./data/zookeeper/data:/data
      - ./data/zookeeper/logs:/datalog
    ports:
      - "2181:2181"
    networks:
      - quant-network
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka消息队列
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: quant-kafka-prod
    restart: always
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_NUM_PARTITIONS: 3
      TZ: Asia/Shanghai
    volumes:
      - ./data/kafka:/var/lib/kafka/data
    ports:
      - "9092:9092"
      - "9093:9093"
    networks:
      - quant-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5

  # 用户服务
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: quant-user-service-prod
    restart: always
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/quant_trading?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD}
      DUBBO_REGISTRY_ADDRESS: zookeeper://zookeeper:2181
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      JWT_SECRET: ${JWT_SECRET}
      TZ: Asia/Shanghai
    ports:
      - "8081:8081"
      - "20881:20881"
    networks:
      - quant-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 市场数据服务
  market-data-service:
    build:
      context: ./market-data-service
      dockerfile: Dockerfile
    container_name: quant-market-data-service-prod
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      TUSHARE_TOKEN: ${TUSHARE_TOKEN}
      LOG_LEVEL: INFO
      TZ: Asia/Shanghai
    volumes:
      - ./data/market-data:/app/data
      - ./logs/market-data:/app/logs
    networks:
      - quant-network

  # Web前端
  web-frontend:
    build:
      context: ./web-frontend
      dockerfile: Dockerfile
    container_name: quant-web-frontend-prod
    restart: always
    environment:
      NODE_ENV: production
      VITE_API_BASE_URL: http://user-service:8081
    ports:
      - "80:80"
    networks:
      - quant-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: quant-nginx-prod
    restart: always
    depends_on:
      - web-frontend
      - user-service
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx:/var/log/nginx
    ports:
      - "443:443"
      - "8080:8080"
    networks:
      - quant-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  quant-network:
    driver: bridge

volumes:
  mysql-data:
  redis-data:
  zookeeper-data:
  kafka-data:
